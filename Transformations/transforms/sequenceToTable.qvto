modeltype SequenceDiagram uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype InteractionTable uses 'interactionTable';

transformation sequenceDiagramToTable(in seqDiagram : SequenceDiagram, out interactionTable : InteractionTable);

property knownStates : Set(InteractionTable::State);
property knownObjects : Set(CommObject);
main() {
	
	var package := object ScenarioPackage {} ;
	
	seqDiagram.objectsOfKind(Lifeline).map transformLifeline();
	seqDiagram.objectsOfKind(StateInvariant)->select(s | s.oclAsType(StateInvariant).name.substringBefore("_") = "00").map transformeStateInvariant();
	seqDiagram.objectsOfKind(StateInvariant).map transformeStateInvariant();
	// don't transform the replies as they indicate the return type and no operation
	seqDiagram.objectsOfKind(Message)->select(m | m.messageSort != MessageSort::reply).map transformMessage();
	seqDiagram.objectsOfKind(Interaction).map transformInteraction(package);	
}


mapping Interaction::transformInteraction(inout package : ScenarioPackage) : Scenario {
	
	log("<<<<<Transforming Interaction " + self.name + ">>>>");
	log("");
	
	name := self.name;
	
	var resolvedExecSpecs : Set(ExecutionSpecification) := Set{};
	
	var allExecSpecs := self.fragment[ExecutionSpecification]->select(e | e.start.oclIsKindOf(MessageOccurrenceSpecification));
	
	
	//allExecSpecs->collect(e | log(e.name));
	
	while (not resolvedExecSpecs->includesAll(allExecSpecs)) {
			
		var remaining := allExecSpecs - resolvedExecSpecs;
		while(not remaining->isEmpty()) {
			
			var curFrag := remaining->any(true);		
			
			var dependencies := curFrag.getEnclosedOccs()->select(oc | oc.message.messageSort = MessageSort::synchCall).getReceivingExecSpec();
						
									
			if (not resolvedExecSpecs->includes(curFrag) and resolvedExecSpecs->includesAll(dependencies)) {
				communications += curFrag.getEnclosedOccs()->select(oc | oc.message.messageSort = MessageSort::asynchCall).map transformMsgOccToUser();
				communications += curFrag.start.oclAsType(MessageOccurrenceSpecification).map transformMsgOccToSys();
				resolvedExecSpecs := resolvedExecSpecs->including(curFrag);
			};
			remaining := remaining->excluding(curFrag);		
		};
	};
	
	package.scenarios += result;
	
	log("");
	log("");
		
}


mapping StateInvariant::transformeStateInvariant() : InteractionTable::State 
	when {
		knownStates->select(s | s.name = self.name.substringAfter("_"))->isEmpty();
	}{
	name := self.name.substringAfter("_");
	if (self.name.substringBefore("_") = "00") {
		result.isInit := true;
		log("initial State : " + name);
	};
	
	knownStates := knownStates->including(result);
} 

helper StateInvariant::getState() : InteractionTable::State {
	return knownStates->select(s  | s.name = self.name.substringAfter("_"))->any(true);
}

mapping Lifeline::transformLifeline() : CommObject 
	when {
		knownObjects->select(s | s.name = self.name)->isEmpty();
	} {
	name := self.name;
	knownObjects := knownObjects->including(result);
}

// TODO: Better way to actually find one without calling "when" again?
helper Lifeline::getObj() : CommObject {
	return knownObjects->select(s  | s.name = self.name)->any(true);
}


mapping Message::transformMessage() : InteractionTable::Operation {
	name := self.name;
}

mapping MessageOccurrenceSpecification::transformMsgOccToSys() : InteractionTable::SystemCommunication 
	when {
		self.message.messageSort = MessageSort::synchCall;
	}{
	
	var execOcc := self.getReceivingExecSpec();
	
		
	var invariantsOnLifeline := execOcc.covered->any(true).coveredBy[StateInvariant];
	
	var returnType := "void";
	
	if (execOcc.finish.oclAsType(MessageOccurrenceSpecification).message.messageSort = MessageSort::reply) {
		returnType := execOcc.finish.oclAsType(MessageOccurrenceSpecification).message.name;
	};
	
	var myIdx := execOcc.name.substringBefore("_").asInteger();
		
	var preState := invariantsOnLifeline->select(i | i.name.substringBefore("_").asInteger() < myIdx)->sortedBy(i | i.name.substringBefore("_").asInteger())->last();
	var postState := invariantsOnLifeline->select(i | i.name.substringBefore("_").asInteger() > myIdx)->sortedBy(i | i.name.substringBefore("_").asInteger())->first();
	
	
	result.preState := preState.getState();
	result.postState := postState.getState();
	result.returnType := returnType;
	result.message := execOcc.start.oclAsType(MessageOccurrenceSpecification).transformToMessage();
	
	
	log("----SYSTEM COMMUNICATION----");
	log(result.message.sender.name + " -> " + result.message.receiver.name);	
	log("operation: " + result.message.operation.name);
	log("result: " + returnType);
	log("state before: " + result.preState.name);
	log("state after: " + result.postState.name);
	log("");
	
	var occsInBetween := execOcc.getEnclosedOccs();
							
	var curIdx := 0;
	while(curIdx <= occsInBetween->size()) {
		
		result.covers += occsInBetween->at(curIdx).resolveone(Communication);
		curIdx := curIdx +1;
	};
		
	
	occsInBetween->collect(m | log(m.message.name));
	log("");
}

helper ExecutionSpecification::getEnclosedOccs() : OrderedSet(MessageOccurrenceSpecification) {
		// transform all operations my Object does before the return message
	var msgOccs := self.enclosingInteraction.fragment[MessageOccurrenceSpecification]->select(m | m.message.getSender() = self.covered->any(true) or 
																								   m.message.messageSort != MessageSort::reply and m.message.getReceiver() = self.covered->any(true));
	var startIdx := msgOccs->indexOf(self.start);
	var endIdx := msgOccs->indexOf(msgOccs->subOrderedSet(startIdx+1,msgOccs->size())->select(m | m.message.getReceiver() = self.covered->any(true))->first());
	
	if (endIdx.oclIsInvalid()) {
		//there was no subsequent call...	
		endIdx := msgOccs->size();
	};
							
	return msgOccs->subOrderedSet(startIdx,endIdx)->select(m | //startIdx+1?
						m.message.getSender() = self.covered->any(true) and
						m.message.messageSort != MessageSort::reply);
	
} 

mapping MessageOccurrenceSpecification::transformMsgOccToUser() : UserCommunication
	when {
		self.message.messageSort = MessageSort::asynchCall;
		self.message.receiveEvent = self;
	}{
	
	returnType := 'void';
	message := self.transformToMessage();
	
	log("----USER COMMUNICATION----");	
	log(result.message.sender.name + " -> " + result.message.receiver.name);
	log("operation: " + result.message.operation.name);
	log(self.message.name);
	log("result: " + returnType);
	log("");
	
}

helper MessageOccurrenceSpecification::getReceivingExecSpec() : ExecutionSpecification {
	var lifeline := self.message.getReceiver();
	var res := lifeline.coveredBy[ExecutionSpecification]->select(e | e.start = self.message.receiveEvent);
	return res->any(true);
}


helper Message::getReceiver() : Lifeline {
	// we assume that the receive Event can only be a MessageOccurenceSpecification
	return self.receiveEvent[MessageOccurrenceSpecification].covered->any(true);
}

helper Message::getSender() : Lifeline {
	return self.sendEvent[MessageOccurrenceSpecification].covered->any(true);
	
}

helper MessageOccurrenceSpecification::transformToMessage() : CommMessage {
	var message := object CommMessage {
		
		sender := self.message.getSender().getObj();
		receiver := self.message.getReceiver().getObj();
		operation := self.message.resolveone(InteractionTable::Operation);
	};
	return message;
}