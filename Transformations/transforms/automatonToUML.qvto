modeltype InteractionTable uses 'interactionTable';
modeltype BehaviourTable uses 'behaviourTable';
modeltype StateDiagram uses uml('http://www.eclipse.org/uml2/5.0.0/UML');
modeltype Automaton uses 'ioAutomaton';

transformation automatonToUML(in automaton : Automaton, out uml : StateDiagram);

main() {
	automaton.objectsOfKind(InteractionTable::State).map transformState();
	automaton.objectsOfKind(AutomatonPackage).map transformAutomatonPackage();

}


mapping AutomatonPackage::transformAutomatonPackage() : Set(StateMachine) {
	var diagrams := self.automatons.map transformAutomaton(); 
}

mapping InteractionTable::State::transformState() : StateDiagram::State {
	name := self.name;
}

mapping IOAutomaton::transformAutomaton() : StateMachine {
	name := self.actor.name;
	
	var initialState := object Pseudostate {
		kind := PseudostateKind::initial;
		name := "init";
	};
	
	var initialTransition := object Transition {
		name := "initTrans";
		source := initialState;
		// TODO: this does not work this way, rewrite
		target := self.start.resolveone(StateDiagram::State);
	};
	
	
	var myRegion := object Region {
		name := "region of " + self.actor.name;
		subvertex += initialState;
		transition += initialTransition;
	};
	
	myRegion.subvertex += self.transitions.preState.map toStateSet(self, myRegion);
	
	
	region += myRegion;	
}

//transforms a State to a Set of a stable state and the corresponding activity states
//all states are properly linked with the right transitions
//respective the given automaton
mapping InteractionTable::State::toStateSet(in aut : IOAutomaton, inout region : Region) : Set(Vertex) {

	init {
		var stableState :=  self.resolveone(StateDiagram::State);
		
		result += stableState;
		
		// we get all operations our object understands in the current state
		var ops := aut.getAllApplicableOps(self);
		
		log("");
		log("Object: " + aut.actor.name);
		log("State: " + self.name);
		
		
		//we get all corresponding behaviours we have to deal with
		while(not ops->isEmpty()) {
			var curOp := ops->any(true);
			var curBehs := aut.getAllBehaviours(self,curOp);
			
			if (curBehs->size() > 0) {
			

				var trans := object Transition {
					name := curOp;
					source := stableState;
					trigger += object Trigger {
						name := curOp;
					};
				};
				
				// make an activity state for the current set
				var activityState := object StateDiagram::State {
					name := curBehs->any(true).activation.name;
					submachine := curBehs->subStateMachine(trans, region);
				};
				
				//trans.target := activityState;
				
				region.transition += trans;
				result += activityState;
				
				curBehs->collect(b | log(b.inMessage.name));
				
			};
			
			ops := ops->excluding(curOp);
		};
		
	}
			
}

helper Set(BehaviourTable::Behaviour)::subStateMachine(inout transition : Transition, inout parentRegion : Region) : StateDiagram::StateMachine {
	return object StateMachine {
		name := "submachine for "+ self->any(true).activation.name;
		
		var myRegion := object Region {
			name := "region of " + self->any(true).activation.name;
		};
		
		var entryState := object Pseudostate {
			kind := PseudostateKind::entryPoint;
			name := "entry";
		};
		myRegion.subvertex += entryState;
		
		transition.target := entryState;
	
		var firstTrans = object Transition {
			name := "entryTransFrom" + self->any(true).activation.name;
			source := entryState;
		};
		myRegion.transition += firstTrans;
		
		
		myRegion.subvertex += self->toStateFragments(firstTrans,1, myRegion, parentRegion);

		region += myRegion;
		
	}
}

helper Set(BehaviourTable::Behaviour)::toStateFragments(inout transition : Transition, in offset : Integer, inout region : Region, inout parentRegion : Region) : Set(Vertex) {
	
	// first of all find the longest common prefix
	var curOff := offset;
	var curOp := self->any(b | b.activation.outMessages->size() > 0).activation.outMessages->at(curOff);
	var commonPrefix : Sequence(BehaviourTable::OutMessage) = Sequence{};

	while(self->forAll(b | b.activation.outMessages->at(curOff).operation.name = curOp.operation.name 
						and b.activation.outMessages->at(curOff).returnType = curOp.returnType
						and b.activation.outMessages->at(curOff).recvObject = curOp.recvObject)) {
						
		// common prefix found!
		commonPrefix += curOp;
		curOff := curOff+1;
		curOp := self->any(b | b.activation.outMessages->size() > 0).activation.outMessages->at(curOff);
		
	};
	
	var ret : Set(StateDiagram::Vertex) := Set{};
	var newTrans := transition;
	
	// Generate fragment with prefix
	if (commonPrefix->size() > 0) {
		var prefixState := object StateDiagram::State {
			//name := "prefixState" + curOff.toString();
			doActivity := object StateDiagram::OpaqueBehavior {
				//TODO: receiver
				body += commonPrefix->collect(m | m.recvObject.name + "." + m.operation.name + ";");
			};
			name := doActivity.oclAsType(OpaqueBehavior).body->at(1);
		};	
		transition.target := prefixState;
		newTrans := object Transition {
			source := prefixState;
		};
		region.transition += newTrans;
		ret += prefixState;
	};
	
	// if after removing prefix something remains...
	if(curOff <= self->any(true).activation.outMessages->size()) {
		
		// find out which branches we have to follow.
		// branches that start with the same prefix can stay together, so don't just split everything!
		var branches := self->collectNested(a | a->select(b | a.activation.outMessages->at(curOff).operation.name = b.activation.outMessages->at(curOff).operation.name));
		
		// build the state that is responsible for the case distinction
		var splitState := object StateDiagram::State {
			//name := "splitState" + curOff.toString();
			doActivity := object StateDiagram::OpaqueBehavior {
				//TODO: receiver
				body += "check := " + self->any(true).activation.outMessages->at(curOff).recvObject.name + "." + self->any(true).activation.outMessages->at(curOff).operation.name;
			};
			name := doActivity.oclAsType(OpaqueBehavior).body->at(1);
		};
		newTrans.target :=  splitState;	
		newTrans.name := "("+newTrans.source.name + ") to (" + newTrans.target.name+")";
		
		ret += splitState;
		
		// recursively call on all new distinct branches
		while(not branches->isEmpty()) {
			var coBranch := branches->any(true);
			var guardName := coBranch->asSequence()->at(curOff).activation.outMessages->at(curOff).returnType;//self->any(b | b = coBranch).outMessages->at(curOff).returnType; //TODO falsch
			var branchTrans := object Transition {
				
				source := splitState;
				guard := object Constraint {
					name := "[ check = " + guardName + " ]";
					specification := object OpaqueExpression {
						body := "check = " + guardName;
					};
				};
				name := guard.name;
			};
			region.transition += branchTrans;
			ret += coBranch->toStateFragments(branchTrans,curOff+1,region, parentRegion);
			branches := branches->excluding(coBranch);
		};
		
	} else {
		// there are no more operations, but the return types or the post states of the activations could differ, 
		// so create an exitState for each different activations
		var exits : Set(String) = Set{};
		var behaviours := self;
		while(not behaviours->isEmpty()) {
			var behaviour := behaviours->any(true);
			var string := behaviour.postState.name.toString() + behaviour.activation.returnType.toString();
			if(not exits->includes(string)){
				// the exit point does not exist yet, create it and add the string to exits set
				
				// if newTrans was already used, create a new one and add it to the region
				if(newTrans.target != null){
					var oldSource := newTrans.source;
					newTrans := object Transition {
						source := oldSource;
					};
					region.transition += newTrans;
				};
				// create exitState, add it to region and set the target of newTrans to it
				var exitState := object Pseudostate {
					kind := PseudostateKind::exitPoint;
					name := "exit from (" + newTrans.source.name+")";
				};
				newTrans.target := exitState;
				newTrans.name := "("+newTrans.source.name + ") to (" + newTrans.target.name+")";
		
				// create the outgoing transition from the exitPoint
				var exitTrans := object Transition {
					source := exitState;
					target :=  behaviour.postState.resolveone(StateDiagram::State);
					effect := object OpaqueBehavior {
						body := "return " + behaviour.activation.returnType; 
					};
					name := "("+source.name + ") to (" + target.name+ ")";
			};
			
			parentRegion.transition += exitTrans;
			ret += exitState;
			
			exits += string;
			};
			behaviours := behaviours->excluding(behaviour);
		};
		

	};
	
	return ret;
}

helper IOAutomaton::getAllBehaviours(in state : InteractionTable::State, in opName : String) : Set(BehaviourTable::Behaviour) {
	return self.transitions->select(b | b.preState = state and b.inMessage.name = opName);
}

helper IOAutomaton::getAllApplicableOps(in state : InteractionTable::State) : Set(String) {
	return self.transitions->collect(b | b.inMessage.name)->asSet();
}
